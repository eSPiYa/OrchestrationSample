services:
  proxy:
    image: nginx:latest
    ports:      
      - "80:80"
      - "443:443"
    volumes:
      - ./ProxyServers/Nginx/nginx.conf:/etc/nginx/nginx.conf
    secrets:
      - nginx.cert
      - nginx.key
      - dhparam.pem
    stdin_open: true
    tty: true
    depends_on:
      - ngwebui
      - apiapp

  redis:
    image: redis:alpine
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  pgdb:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - pg-data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: vdolosa@gmail.com
      PGADMIN_DEFAULT_PASSWORD: password
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  ngwebui:
    image: ${DOCKER_REGISTRY-}ngwebui
    build:
      context: ./ngwebui
      dockerfile: dockerfile
    environment:
      ENV: "dockered-nginx"
    volumes:      
      - "./ngwebui:/app"
      - alpine-node-modules:/app/node_modules
    depends_on:
      - apiapp

  apiapp:
    image: ${DOCKER_REGISTRY-}apiapp
    build:
      context: .
      dockerfile: ApiApp/Dockerfile
    environment:
      - ASPNETCORE_HTTP_PORTS=8080
      - redis__server__host=redis
      - orchestrator__url=http://orchestrator:8080
      - tmdb__api__key=${TMDB_API_KEY}
      - tmdb__api__ReadAccessToken=${TMDB_API_READ_ACCESS_TOKEN}
    depends_on:
      redis:
        condition: service_healthy

  orchestrator:
    image: ${DOCKER_REGISTRY-}orchestrator
    build:
      context: .
      dockerfile: Orchestrator/Dockerfile
    environment:
      - ASPNETCORE_HTTP_PORTS=8080
      - redis__server__host=redis
      - signalr__server__url=http://apiapp:8080
      - tmdb__api__key=${TMDB_API_KEY}
      - tmdb__api__ReadAccessToken=${TMDB_API_READ_ACCESS_TOKEN}
    depends_on:
      redis:
        condition: service_healthy

secrets:
  nginx.cert: 
    file: ./ProxyServers/Certificates/selfsigned.crt
  nginx.key: 
    file: ./ProxyServers/Certificates/selfsigned.key
  dhparam.pem:
    file: ./ProxyServers/Certificates/dhparam.pem

volumes:
  alpine-node-modules:
  pg-data:
  pgadmin-data: